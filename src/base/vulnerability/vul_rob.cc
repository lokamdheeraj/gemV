#include "base/vulnerability/vul_rob.hh"

RobVulCalc::RobVulCalc(int entries, int threads)
{
    numEntries = entries;
    numThreads = threads;

    histories = new History*[numThreads];
    for(int i = 0; i < numThreads; i++) {
        histories[i] = new History[numEntries];
        for(int j = 0; j < numEntries; j++) {
            histories[i][j].incomingTick = -1;
            histories[i][j].seqNum = -1;
        }
    }
}

RobVulCalc::~RobVulCalc()
{
    for(int i = 0; i < numThreads; i++)
        delete [] histories[i];

    delete [] histories;
}

void
RobVulCalc::vulOnInsert(int idx, int tid, int seqNum)
{
    histories[tid][idx].incomingTick = curTick();
    histories[tid][idx].seqNum = seqNum;
}

long
RobVulCalc::vulOnCommit(int tid, int seqNum) 
{
    long vul = 0;
    for(int i = 0; i < numEntries; i++) {
        if(histories[tid][i].seqNum == seqNum && histories[tid][i].incomingTick != -1) {
            vul += curTick() - histories[tid][i].incomingTick;
        }
    }
    //if (isVulnerableMOV) return vul*(ROB_ENTRY_SIZE-32);
    return vul*ROB_ENTRY_SIZE;
}

void
RobVulCalc::vulOnSquash(int tid, int seqNum)
{
    for(int i = 0; i < numEntries; i++) {
        if(histories[tid][i].seqNum == seqNum) {
            histories[tid][i].incomingTick = -1;
            histories[tid][i].seqNum = -1;
            break;
        }
    }
}
