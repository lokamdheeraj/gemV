

#include "base/vulnerability/vul_cache.hh"

CacheVulCalc::CacheVulCalc(int cacheline, int protMode)
    : cacheLineSize(cacheline),
      protectionMode(protMode)
{
    numWords = cacheline / WORD_SIZE;
}

void
CacheVulCalc::vulOnInsert(CacheBlk *blk)
{
    if(protectionMode == PARITY_BLOCK) {
        for(unsigned i = 0; i < numWords; ++i) {
            blk->dataVulHist[i].op = INCOMING;
            blk->dataVulHist[i].t = curTick();
            blk->dataVulHist[i].incomingTick = curTick();
        }
    } else if(protectionMode == PARITY_WORD) {
        for(unsigned i = 0; i < numWords; ++i) {
            blk->dataVulHist[i].op = INCOMING;
            blk->dataVulHist[i].t = curTick();
        }
    } else if (protectionMode == ECC_BLOCK) {

    } else if (protectionMode == ECC_WORD) {

    } else {
        for(unsigned i = 0; i < numWords; ++i) {
            blk->dataVulHist[i].op = INCOMING;
            blk->dataVulHist[i].t = curTick();
        }
    }

}

long
CacheVulCalc::vulOnRead(CacheBlk *blk, PacketPtr pkt)
{
    long vulTime = 0;

    if(protectionMode == PARITY_BLOCK) {
        for(unsigned i = 0; i < numWords; ++i) {
            if(blk->isDirty()) {
                if(isTarget(pkt, i)) {
                    vulTime += curTick() - getRecent(blk);
                    blk->dataVulHist[i].op = READ;
                    blk->dataVulHist[i].t = curTick();
                }
            } else {
                blk->dataVulHist[i].op = READ;
                blk->dataVulHist[i].t = curTick();
            }
        }
    } else if(protectionMode == PARITY_WORD) {
        for(unsigned i = 0; i < numWords; ++i) {
            if(blk->isDirty()) {
                if(isTarget(pkt, i)) {
                    vulTime += curTick() - blk->dataVulHist[i].t;
                    blk->dataVulHist[i].op = READ;
                    blk->dataVulHist[i].t = curTick();
                }
            } else {
                if(isTarget(pkt, i)) {
                    blk->dataVulHist[i].op = READ;
                    blk->dataVulHist[i].t = curTick();
                }
            }
        }
    } else if(protectionMode == ECC_BLOCK) {

    } else if(protectionMode == ECC_WORD) {

    } else {
        for(unsigned i = 0; i < numWords; ++i) {
            if(isTarget(pkt, i)) {
                vulTime += curTick() - blk->dataVulHist[i].t;
                blk->dataVulHist[i].op = READ;
                blk->dataVulHist[i].t = curTick();
                break;
            }
        }
    }

    return vulTime*WORD_SIZE;
}

void 
CacheVulCalc::vulOnWrite(CacheBlk *blk, PacketPtr pkt)
{
    if(protectionMode == PARITY_BLOCK) {
        for(unsigned i = 0; i < numWords; ++i) {
            if(isTarget(pkt, i)) {
                blk->dataVulHist[i].op = WRITE;
                blk->dataVulHist[i].t = curTick();
                break;
            }
        }
    } else if(protectionMode == PARITY_WORD) {
        for(unsigned i = 0; i < numWords; ++i) {
            if(isTarget(pkt, i)) {
                blk->dataVulHist[i].op = WRITE;
                blk->dataVulHist[i].t = curTick();
                break;
            }
        }           
    } else if(protectionMode == ECC_BLOCK) {

    } else if(protectionMode == ECC_WORD) {

    } else {
        for(unsigned i = 0; i < numWords; ++i) {
            if(isTarget(pkt, i)) {
                blk->dataVulHist[i].op = WRITE;
                blk->dataVulHist[i].t = curTick();
            }
        }
    }

}

long
CacheVulCalc::vulOnEvict(CacheBlk *blk)
{
    long vulTime = 0;

    if(protectionMode == PARITY_BLOCK) {
        for(unsigned i = 0; i < numWords; ++i) {
            if(blk->isDirty())
                vulTime += curTick() - getRecent(blk);
            blk->dataVulHist[i].op = INVALID;
            blk->dataVulHist[i].t = curTick();

        }
    } else if(protectionMode == PARITY_WORD) {
        for(unsigned i =0; i < numWords; ++i) {
            if(blk->isDirty())
                vulTime += curTick() - blk->dataVulHist[i].t;
            blk->dataVulHist[i].op = INVALID;
            blk->dataVulHist[i].t = curTick();
        }
    } else if(protectionMode == ECC_BLOCK) {

    } else if(protectionMode == ECC_WORD) {

    } else {
        for(unsigned i = 0; i < numWords; ++i) {
            if(blk->isDirty())
                vulTime += curTick() - blk->dataVulHist[i].t;
            blk->dataVulHist[i].op = INVALID;
            blk->dataVulHist[i].t = curTick();
        }
    }

    return vulTime*WORD_SIZE;

}

Tick
CacheVulCalc::getRecent(CacheBlk *blk)
{
    Tick t=0;
    int size = cacheLineSize/WORD_SIZE;
    for(unsigned int i=0; i < size; i++) {
        if(blk->dataVulHist[i].t > t)
            t = blk->dataVulHist[i].t;
    }
    return t;
}

bool
CacheVulCalc::isTarget(PacketPtr pkt, unsigned wordIdx)
{
    Addr start = pkt->getOffset(cacheLineSize)/WORD_SIZE;
    assert(pkt->getSize() > 0);
    Addr end = start + (pkt->getSize() - 1)/WORD_SIZE;
    if(wordIdx >= start && wordIdx <= end)
        return true;
    else
        return false;
}
    
