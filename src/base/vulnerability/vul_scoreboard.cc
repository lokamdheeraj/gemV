
#include "base/vulnerability/vul_scoreboard.hh"


//////////////////////////////numResults
long
scoreboardVulCal::vulOnReadnumResults(int idx)
{
long vul = 0;
assert(idx < scSize);
if (historiesnumResults[idx].t == -1 ){ historiesnumResults[idx].t = curTick(); return 0;}
    vul += (curTick() - historiesnumResults[idx].t); 
    historiesnumResults[idx].op = READ;
    historiesnumResults[idx].t = curTick();

    return vul;
}
void
scoreboardVulCal::vulOnWritenumResults(int idx)
{
    assert(idx < scSize);

    historiesnumResults[idx].op = WRITE;
    historiesnumResults[idx].incomingTick = curTick();
    historiesnumResults[idx].t = curTick();

}

//////////////////////////////////returncycle
long
scoreboardVulCal::vulOnReadreturnCycle(int idx)
{
long vul = 0;
assert(idx < scSize);
if (hc[idx].t == -1 ) {hc[idx].t = curTick(); return 0;}
    vul += (curTick() - hc[idx].t); 
    hc[idx].op = READ;
    hc[idx].t = curTick();

    return vul;
}
void
scoreboardVulCal::vulOnWritereturnCycle(int idx)
{
    assert(idx < scSize);

    //hc[idx].op = WRITE;
    hc[idx].incomingTick = curTick();
    hc[idx].t = curTick();

}
/////////////////////////////////////writingInst
long
scoreboardVulCal::vulOnReadwritingInst(int idx)
{
long vul = 0;
assert(idx < scSize);
if (historieswritingInst[idx].t == -1 ) {historieswritingInst[idx].t = curTick(); return 0;}
    vul += (curTick() - historieswritingInst[idx].t); 
    historieswritingInst[idx].op = READ;
    historieswritingInst[idx].t = curTick();

    return vul;
}
void
scoreboardVulCal::vulOnWritewritingInst(int idx)
{
    assert(idx < scSize);

    historieswritingInst[idx].op = WRITE;
    historieswritingInst[idx].incomingTick = curTick();
    historieswritingInst[idx].t = curTick();

}
/////////////////////////////////////////////numUnpredResults
long
scoreboardVulCal::vulOnReadnumUnpredResults(int idx)
{
long vul = 0;
assert(idx < scSize);
if (historiesnumUnpredResults[idx].t == -1 ) {historiesnumUnpredResults[idx].t = curTick(); return 0;}
    vul += (curTick() - historiesnumUnpredResults[idx].t); 
    historiesnumUnpredResults[idx].op = READ;
    historiesnumUnpredResults[idx].t = curTick();

    return vul;
}
void
scoreboardVulCal::vulOnWritenumUnpredResults(int idx)
{
    assert(idx < scSize);

    historiesnumUnpredResults[idx].op = WRITE;
    historiesnumUnpredResults[idx].incomingTick = curTick();
    historiesnumUnpredResults[idx].t = curTick();

}
///////////////////////////////////////fuIndices
long
scoreboardVulCal::vulOnReadfuIndices(int idx)
{
long vul = 0;
assert(idx < scSize);
if (historiesfuIndices[idx].t == -1 ) {historiesfuIndices[idx].t = curTick();  return 0;}
    vul += (curTick() - historiesfuIndices[idx].t); 
    historiesfuIndices[idx].op = READ;
    historiesfuIndices[idx].t = curTick();

    return vul;
}
void
scoreboardVulCal::vulOnWritefuIndices(int idx)
{
    assert(idx < scSize);

    historiesfuIndices[idx].op = WRITE;
    historiesfuIndices[idx].incomingTick = curTick();
    historiesfuIndices[idx].t = curTick();

}
//////////////////////////////
scoreboardVulCal::scoreboardVulCal(int Size)
{
	scSize = Size;
     
    for(unsigned i = 0; i < Size; ++i) {
        History h1;
        History h2;
        History h3;
        History h4;
        History h5;
	h1.t = -1;
	h2.t = -1;
	h3.t = -1;
	h4.t = -1;
	h5.t = -1;
        historiesnumResults.push_back(h1);
        hc.push_back(h2);
        historiesnumUnpredResults.push_back(h3);
        historieswritingInst.push_back(h4);
        historiesfuIndices.push_back(h5);
    }

}

scoreboardVulCal::~scoreboardVulCal()
{

}
/*
long
RegVulCalc::vulOnRead(int idx, bool isInt, bool inMain)
{
    long vul = 0;
    int reg_size = isInt ? INT_REG_SIZE : FLOAT_REG_SIZE;
    
    assert(idx < numRegs);
    
if (inMain)    vul += (curTick() - histories[idx].t) * reg_size;
    histories[idx].op = READ;
    histories[idx].t = curTick();

    return vul;

}

void 
RegVulCalc::vulOnWrite(int idx, bool isInt)
{
    assert(idx < numRegs);

    histories[idx].op = WRITE;
    histories[idx].incomingTick = curTick();
    histories[idx].t = curTick();
}
*/
