
#include "base/vulnerability/vul_histbuf.hh"

HistbufVulCalc::HistbufVulCalc(int tid)
{
    for(unsigned i = 0; i < tid; ++i){
        std::list<History> h;
        histories.push_back(h);
    }
}

long
HistbufVulCalc::vulOnRead(int seqNum, int tid)
{
    long vul = 0;

    std::list<History>::iterator hit = histories[tid].begin();

    while(hit != histories[tid].end()) {
        if(hit->seqNum == seqNum 
            && hit->incomingTick != -1 ) {
            vul += curTick() - hit->incomingTick;
            hit->incomingTick = -1;
            hit->op = INVALID;

            hit = histories[tid].erase(hit);

            return vul*HIST_BUF_ENTRY_SIZE;
        }
        hit++;
    }

    panic("HISTBUF READ: seqnum %d not found in histories", seqNum);

    return 0;                    
}

void
HistbufVulCalc::vulOnRemove(int seqNum, int tid)
{
    std::list<History>::iterator hit = histories[tid].begin();

    while(hit != histories[tid].end()) {

        if(hit->seqNum == seqNum &&
                hit->incomingTick != -1) {
            histories[tid].erase(hit);
            return;
        }
        hit++;
    }

    panic("HISTBUF REMOVE: seqnum %d not found in histories", seqNum);
}

void
HistbufVulCalc::vulOnWrite(int seqNum, int tid)
{
    History h;
    h.incomingTick = curTick();
    h.op = WRITE;
    h.seqNum = seqNum;

    histories[tid].push_back(h);
}
