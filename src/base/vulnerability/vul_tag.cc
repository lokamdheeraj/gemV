#include "base/vulnerability/vul_tag.hh"
#include <math.h>

void
TagVulCalc::vulOnInsert(CacheBlk *blk)
{
    /** Set incoming event and tick */
    blk->tagVulHist.t = curTick();
    blk->tagVulHist.incomingTick = curTick();
    blk->tagVulHist.op = INCOMING;

}

void 
TagVulCalc::vulOnAccess(CacheSet<CacheBlk> *set, Addr tag)
{
    for(unsigned i = 0; i < set->assoc; ++i) {
        CacheBlk *blk = set->blks[i];
        blk->tagVulHist.op = TAGCOMPARE;

        if(hammingDistance(tag, blk->tag) <= 1)
            blk->tagVulHist.uncertain = curTick() - blk->tagVulHist.incomingTick;

        blk->tagVulHist.t = curTick();
    }
}

long
TagVulCalc::vulOnEvict(CacheBlk *blk)
{
    long vulTime = 0;

    if(blk->tagVulHist.incomingTick == -1)
        return 0;

    blk->tagVulHist.op = EVICTION;
    if(blk->isDirty()) {
        vulTime = curTick() - blk->tagVulHist.incomingTick;
    } else {
        vulTime = blk->tagVulHist.uncertain;
    }
    blk->tagVulHist.uncertain = 0;
    blk->tagVulHist.incomingTick = -1;
    return vulTime*tag_size;
}
    
