#include "base/vulnerability/vul_ls_queue.hh"

LSQueueVulCalc::LSQueueVulCalc()
{

}

void
LSQueueVulCalc::init(int lqEntries, int sqEntries)
{
 
    maxLQEntries = lqEntries;
    maxSQEntries = sqEntries;
/*
    historiesLQ = new History[maxLQEntries + 1];
    historiesSQ = new History[maxSQEntries + 1];
*/

    for(unsigned i = 0; i <= maxLQEntries; ++i)
        historiesLQ.push_back(History());

    for(unsigned i = 0; i <= maxSQEntries; ++i)
        historiesSQ.push_back(History());
}

LSQueueVulCalc::~LSQueueVulCalc()
{
/*
    delete [] historiesLQ;
    delete [] historiesSQ;
*/
}

void
LSQueueVulCalc::vulOnInsertLoad(int seqNum, int idx)
{
    //idx = idx % maxLQEntries;
    //printf("Max LQ Entries : %d     Idx: %d\n", maxLQEntries, idx);
    assert(idx <= maxLQEntries);

    historiesLQ[idx].seqNum = seqNum;
    historiesLQ[idx].incomingTick = curTick();

    return;
}

void
LSQueueVulCalc::vulOnInsertStore(int seqNum, int idx)
{
    //idx = idx % maxSQEntries;
    //printf("Max SQ Entries : %d     Idx: %d\n", maxSQEntries, idx);
    assert(idx <= maxSQEntries);

    historiesSQ[idx].seqNum = seqNum;
    historiesSQ[idx].incomingTick = curTick();

    return;
}

long
LSQueueVulCalc::vulOnCommitLoad(int idx, int seqNum)
{
    //idx = idx % maxLQEntries;
    //printf("Max LQ Entries : %d     Idx: %d\n", maxLQEntries, idx);
    assert(idx <= maxLQEntries);

    long vul = 0;
    if(historiesLQ[idx].seqNum == seqNum
            && historiesLQ[idx].incomingTick != -1) {
        vul += curTick() - historiesLQ[idx].incomingTick;
        historiesLQ[idx].incomingTick = -1;
        historiesLQ[idx].seqNum = -1;
    } else {
        panic("LSQ VUL: COMMIT seqNum %d not found in LQ History",seqNum);
    }
    return vul * LSQ_ENTRY_SIZE;
}

long
LSQueueVulCalc::vulOnCommitStore(int idx, int seqNum)
{
    //idx = idx % maxSQEntries;
    //printf("Max SQ Entries : %d     Idx: %d\n", maxSQEntries, idx);
    assert(idx <= maxSQEntries);

    long vul = 0;
    //printf("%ld",vul);
    if(historiesSQ[idx].seqNum == seqNum 
            && historiesSQ[idx].incomingTick != -1){ 
        vul += curTick() - historiesSQ[idx].incomingTick;
        historiesSQ[idx].incomingTick = -1;
        historiesSQ[idx].seqNum = -1;
    } else {
        panic("LSQ VUL: COMMIT seqNum %d not found in SQ History",seqNum);
    }
    return vul *LSQ_ENTRY_SIZE;
}

void
LSQueueVulCalc::vulOnSquash(bool isLoad, int idx, int seqNum)
{
    if(isLoad) {
        //idx = idx % maxLQEntries;
        //printf("Max LQ Entries : %d     Idx: %d\n", maxLQEntries, idx);
        assert(idx <= maxLQEntries);
        if(historiesLQ[idx].seqNum == seqNum) {
            historiesLQ[idx].incomingTick = -1;
            historiesLQ[idx].seqNum = -1;
        } else {
            printf("Well this is not what we expected");
            panic("LSQ VUL: SQUASH seqNum %d not found in LQ History",seqNum);
        }
    } else {
        //idx = idx % maxSQEntries;
        //printf("Max SQ Entries : %d     Idx: %d\n", maxSQEntries, idx);
        assert(idx <= maxSQEntries);
        if(historiesSQ[idx].seqNum == seqNum) {
            historiesSQ[idx].incomingTick = -1;
            historiesSQ[idx].seqNum = -1;
        } else {
            printf("Well this is not what we expected");
            panic("LSQ VUL: SQUASH seqNum %d not found in SQ History",seqNum);
        }
    }
}
