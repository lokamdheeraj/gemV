
#include "base/vulnerability/vulregfile.hh"


long
RegVulCalc::vulOnRead(int idx)
{
long vul = 0;
//assert(idx < scSize);
if (hc[idx].t == -1 ) {hc[idx].t = curTick(); return 0;}
    vul += curTick() - hc[idx].t; 
    hc[idx].t = curTick();
//std::cout << "we are in vulonread and hc[" << idx << "] is " << hc[idx].t << "and vul = "<< vul << "\n";
    return vul;
}
void
RegVulCalc::vulOnWrite(int idx)
{
   // assert(idx < scSize);

    hc[idx].t = curTick();
//std::cout << "we are in vulonwrite and hc[" << idx << "] is " << hc[idx].t << "\n";

}

//////////////////////////////
RegVulCalc::RegVulCalc(int a, int b)
{
	scSize = 10000;
     
    for(unsigned i = 0; i < scSize; ++i) {
        History h2;

	h2.t = -1;

        hc.push_back(h2);

    }

}

RegVulCalc::~RegVulCalc()
{

}
/*
long
RegVulCalc::vulOnRead(int idx, bool isInt, bool inMain)
{
    long vul = 0;
    int reg_size = isInt ? INT_REG_SIZE : FLOAT_REG_SIZE;
    
    assert(idx < numRegs);
    
if (inMain)    vul += (curTick() - histories[idx].t) * reg_size;
    histories[idx].op = READ;
    histories[idx].t = curTick();

    return vul;

}

void 
RegVulCalc::vulOnWrite(int idx, bool isInt)
{
    assert(idx < numRegs);

    histories[idx].op = WRITE;
    histories[idx].incomingTick = curTick();
    histories[idx].t = curTick();
}




#include "base/vulnerability/vul_regfile.hh"

RegVulCalc::RegVulCalc(int numInts, int numFloats)
{
std::cout << "initiate a RegVulCalc\n";     
    numIntRegs = numInts;
    numFloatRegs = numFloats;
    numRegs = numIntRegs + numFloatRegs;

    for(unsigned i = 0; i < numRegs; ++i) {
        History h;
        h.t =-1;
        histories.push_back(h);
    }

}

RegVulCalc::~RegVulCalc()
{

}

long
RegVulCalc::vulOnRead(int idx)
{
    long vul = 0;
   // int reg_size = isInt ? INT_REG_SIZE : FLOAT_REG_SIZE;
    
    assert(idx < 300);

    if (histories[idx].t == -1 ) {histories[idx].t = curTick(); return 0;}
    vul += (curTick() - histories[idx].t);
    histories[idx].op = READ;
    histories[idx].t = curTick();

    return vul;

}

void 
RegVulCalc::vulOnWrite(int idx)
{
    assert(idx < 300);

    histories[idx].op = WRITE;
    histories[idx].incomingTick = curTick();
    histories[idx].t = curTick();
}
*/
