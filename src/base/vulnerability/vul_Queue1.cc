#include "base/vulnerability/vul_Queue1.hh"

QueueVulCalc1::QueueVulCalc1(int S)
{
sizeofQueue=S;
   // h = new History1[sizeofQueue];
        for(int j = 0; j < sizeofQueue; j++) {
            h[j].incomingTick = -1;
            h[j].LSN = -1;
}
}
QueueVulCalc1::~QueueVulCalc1()
{
    
       // delete [] histories[0];

 //  delete h;
//delete time;
}

void
QueueVulCalc1::vulOnWrite(long lineSeqNum)
{
if (h[head].LSN == -1 )
{
   h[head].incomingTick = curTick();
   h[head].LSN = lineSeqNum;
  head++;
   numOfReq++;
}
else
{
assert (true);
}
assert(numOfReq <= sizeofQueue);
}

long
QueueVulCalc1::vulOnRead(long lineSeqNum) 
{
    long vul = 0;
    bool find=false;
   for (int j=0; j< head; j++)
	if (h[j].LSN == lineSeqNum)
{
            vul += curTick()-h[j].incomingTick;
            h[j].LSN = -1;
  	    numOfReq--;
	    find = true;
            head--;
            break;
}
//if (find) std::cout << "we found this in queue: " << lineSeqNum << "\n" ;
assert (find);
    return vul;
}
void 
QueueVulCalc1::vulOnDrian(long lineSeqNum)
{
   for (int j=0; j< head; j++)
	if (h[j].LSN == lineSeqNum)
{
            h[j].LSN = -1;
            h[j].incomingTick = -1;

}
}




